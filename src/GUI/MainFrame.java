/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Entity.Node;
import Entity.SinglyLinkedList;
import Entity.Student;
import java.awt.Dialog;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.Collator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arman
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        MyLinkedList();
        TableSorting();
        SearchBar.setVisible(false);
        CloseLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        RemoveButton = new javax.swing.JButton();
        Add = new javax.swing.JLabel();
        EditButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        ImportButton = new javax.swing.JButton();
        SearchBar = new javax.swing.JTextField();
        SearchLabel = new javax.swing.JLabel();
        CloseLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Family Name", "Student ID No.", "GPA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus-sign.png"))); // NOI18N
        Add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddMouseClicked(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        SaveButton.setText("Save as File");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        ImportButton.setText("Import");
        ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportButtonActionPerformed(evt);
            }
        });

        SearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SearchBarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchBarKeyReleased(evt);
            }
        });

        SearchLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-search-26.png"))); // NOI18N
        SearchLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchLabelMouseClicked(evt);
            }
        });

        CloseLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/close.png"))); // NOI18N
        CloseLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(SearchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CloseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EditButton)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(ImportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Add)
                .addGap(19, 19, 19))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ImportButton, RemoveButton, SaveButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(EditButton, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(CloseLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Add)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RemoveButton)
                        .addComponent(SaveButton)
                        .addComponent(ImportButton)))
                .addGap(21, 21, 21))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ImportButton, RemoveButton, SaveButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CloseLabel, SearchBar});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    SinglyLinkedList<Student> StudentsList = new SinglyLinkedList<Student>();

    public void MyLinkedList() {

        StudentsList.addFirst(new Student("Paris", "Hilton", "645348268", "15"));
        StudentsList.addLast(new Student("Steve", "Rogers", "254465798", "16"));
        StudentsList.addLast(new Student("James", "Hetfield", "156092608", "17"));
        StudentsList.addLast(new Student("Elizabeth", "Woolridge", "545649146", "20"));
        StudentsList.addLast(new Student("Ashley", "Frangipane", "417140022", "20"));
        StudentsList.addLast(new Student("Meryl", "Streep", "117981358", "19"));
        StudentsList.addLast(new Student("Penelope", "Mitchell", "170172507", "17"));
        StudentsList.addLast(new Student("Christian", "Bale", "798933132", "13"));
        StudentsList.addLast(new Student("Jason", "Dean", "186148735", "20"));
        StudentsList.addLast(new Student("Charlotte", "Hope", "356851164", "14"));
        StudentsList.addLast(new Student("Silvester", "Baker", "158020877", "13"));
        StudentsList.addLast(new Student("Tom", "Hanks", "514101596", "11"));
        StudentsList.addLast(new Student("Natalie", "Dormer", "542757349", "10"));
        StudentsList.addLast(new Student("Robert", "Ford", "590475502", "16"));
        StudentsList.addLast(new Student("Naomi", "Watts", "344639285", "14"));
        printList();
    }

    public void printList() {
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];
        Node<Student> F = StudentsList.getHead();
        while (F != null) {
            rowData[0] = F.getData().getName();
            rowData[1] = F.getData().getFamilyName();
            rowData[2] = F.getData().getStudentID_Num();
            rowData[3] = F.getData().getGPA();
            tm.addRow(rowData);
            F = F.getNext();
        }
//        Node<Student> M = StudentsList.getMiddle(StudentsList.getHead());
//        System.out.println(M);
    }

    private void AddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddMouseClicked
        // TODO add your handling code here:
        AddDialog Add = new AddDialog(this, true);
        Add.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        Add.setVisible(true);
        Student St = Add.GetStudentInfo();
        DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
        if (St != null) {
            Student NewStudent = new Student(St.getName(), St.getFamilyName(), St.getStudentID_Num(), St.getGPA());
            StudentsList.addLast(NewStudent);

            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            printList();
        }

    }//GEN-LAST:event_AddMouseClicked
    public Node<Student> SearchNode(String Key) {
        Node<Student> current = StudentsList.getHead();
        Collator Col = Collator.getInstance();
        int i = 1;
        boolean flag = false;
        //Checks whether list is empty  
        if (StudentsList.getHead() == null) {
            System.out.println("List is empty");
        } else {
            while (current != null) {
                //Compares node to be found with each node present in the list  
                if (Col.compare(current.getData().getStudentID_Num(), Key) == 0) {
                    flag = true;
                    break;
                }
                i++;
                current = current.getNext();
            }
            return current;
        }
        if (flag) {
            System.out.println("Element is present in the list at the position : " + i);
        } else {
            System.out.println("Element is not present in the list");
        }
        return null;
    }

    public void Search(String Key) {
        Node<Student> current = StudentsList.getHead();
        Collator Col = Collator.getInstance();
        Col.setStrength(Collator.PRIMARY);
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];
        boolean flag = false;
        //Checks whether list is empty  
        if (StudentsList.getHead() == null) {
            System.out.println("List is empty");
        } else {
            while (current != null) {
                //Compares node to be found with each node present in the list 
                if (Col.compare(current.getData().getName(), Key) == 0) {
                    rowData[0] = current.getData().getName();
                    rowData[1] = current.getData().getFamilyName();
                    rowData[2] = current.getData().getStudentID_Num();
                    rowData[3] = current.getData().getGPA();
                    tm.addRow(rowData);
                    flag = true;
                } else {
                    if (Col.compare(current.getData().getFamilyName(), Key) == 0) {
                        rowData[0] = current.getData().getName();
                        rowData[1] = current.getData().getFamilyName();
                        rowData[2] = current.getData().getStudentID_Num();
                        rowData[3] = current.getData().getGPA();
                        tm.addRow(rowData);
                        flag = true;
                    } else {
                        if (Col.compare(current.getData().getStudentID_Num(), Key) == 0) {
                            rowData[0] = current.getData().getName();
                            rowData[1] = current.getData().getFamilyName();
                            rowData[2] = current.getData().getStudentID_Num();
                            rowData[3] = current.getData().getGPA();
                            tm.addRow(rowData);
                            flag = true;
                        } else {
                            if (Col.compare(current.getData().getGPA(), Key) == 0) {
                                rowData[0] = current.getData().getName();
                                rowData[1] = current.getData().getFamilyName();
                                rowData[2] = current.getData().getStudentID_Num();
                                rowData[3] = current.getData().getGPA();
                                tm.addRow(rowData);
                                flag = true;
                            }
                        }
                    }
                }
                current = current.getNext();
            }
        }
        if (flag) {
            System.out.println("Element Found!");
        } else {
            printList();
            JOptionPane.showMessageDialog(null, "Not Found!");
        }
    }

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
            int row = jTable1.getSelectedRow();
            String Key = TM.getValueAt(row, 2).toString();
            Node<Student> Index = SearchNode(Key);
            if (Index == null) {
                JOptionPane.showMessageDialog(null, "Not Found!");
            }
            String Name = Index.getData().getName();
            String FamilyName = Index.getData().getFamilyName();
            String ID = Index.getData().getStudentID_Num();
            String GPA = Index.getData().getGPA();

            AddDialog Add = new AddDialog(this, true);
            Add.EditAction(Name, FamilyName, ID, GPA);
            Add.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
            Add.setVisible(true);

            Student St = Add.GetStudentInfo();
            String NewName = St.getName();
            String NewFamilyName = St.getFamilyName();
            String NewID = St.getStudentID_Num();
            String NewGPA = St.getGPA();

            Index.getData().setName(NewName);
            Index.getData().setFamilyName(NewFamilyName);
            Index.getData().setStudentID_Num(NewID);
            Index.getData().setGPA(NewGPA);

            int rowcount = TM.getRowCount();
            for (int i = rowcount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            printList();
        } catch (Exception e) {
          //  JOptionPane.showMessageDialog(null, "Please Select a Row!");
        }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        // TODO add your handling code here:
        try {

            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
            int row = jTable1.getSelectedRow();
            String Key = TM.getValueAt(row, 2).toString();
            Node<Student> TheStudent = SearchNode(Key);
            StudentsList.removeElement(TheStudent.getData());

            int rowcount = TM.getRowCount();
            for (int i = rowcount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            printList();
        } catch (Exception d) {
            JOptionPane.showMessageDialog(null, "Please Select a Row!");
        }
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        File f = new File("Table Content With Linked List.txt");
        try {
            FileWriter fw = new FileWriter(f);
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < jTable1.getRowCount(); i++) {  //Rows
                for (int j = 0; j < jTable1.getColumnCount(); j++) {  //Columns
                    bw.write(jTable1.getValueAt(i, j).toString() + " ");
                }
                bw.newLine();
            }

            bw.close();
            fw.close();
            JOptionPane.showMessageDialog(null, "Data Exported");

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void ImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
        // TODO add your handling code here:
        File f = new File("Table Content With Linked List.txt");
        try {
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            Object[] lines = br.lines().toArray();
            Student[] rowContent = new Student[100];
            String Name = "";
            String FamilyName = "";
            String ID = "";
            String GPA = "";
            Collator Col = Collator.getInstance();
            boolean Existence = false;
            for (int i = 0; i < lines.length; i++) {
                String[] row = lines[i].toString().split(" ");
                rowContent[i] = new Student(row[0], row[1], row[2], row[3]);
            }
            for (int k = 0; k < 100; k++) {
                if (rowContent[k] != null) {
                    Name = rowContent[k].getName();
                    FamilyName = rowContent[k].getFamilyName();
                    ID = rowContent[k].getStudentID_Num();
                    GPA = rowContent[k].getGPA();
                }
                Node<Student> n = StudentsList.getHead();
                while (n != null) {
                    if (Col.compare(n.getData().getName(), Name) != 0 && Col.compare(n.getData().getFamilyName(), FamilyName) != 0 && Col.compare(n.getData().getStudentID_Num(), ID) != 0) {
                        Existence = false;
                    } else {
                        Existence = true;
                        break;
                    }
                    n = n.getNext();
                }
                if (Existence == false) {
                    Student ST = new Student(Name, FamilyName, ID, GPA);
                    StudentsList.addLast(ST);
                }
            }
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();

            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            ImportButton.setEnabled(false);
            printList();

            JOptionPane.showMessageDialog(
                    null, "Data Imported");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File not found!");
            //Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ImportButtonActionPerformed
    int p = 0;
    private void SearchLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchLabelMouseClicked
        // TODO add your handling code here:
        if (p == 0) {
            SearchBar.setVisible(true);
            CloseLabel.setVisible(true);
            MainFrame.this.revalidate();
            MainFrame.this.repaint();
            p++;
        } else {
            String text = SearchBar.getText().trim();
            if (text.trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please Enter Something to Search!");
            } else {
                DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
                int RowCount = TM.getRowCount();
                for (int i = RowCount - 1; i >= 0; i--) {
                    TM.removeRow(i);
                }
                Search(text);
            }
        }
    }//GEN-LAST:event_SearchLabelMouseClicked

    private void SearchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyReleased
        // TODO add your handling code here:
        if (SearchBar.getText().trim().length() == 0) {
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            printList();
        }
    }//GEN-LAST:event_SearchBarKeyReleased

    private void SearchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyPressed
        // TODO add your handling code here:
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            String text = SearchBar.getText().trim();
            if (text.length() == 0) {
                JOptionPane.showMessageDialog(null, "Please Enter Something to Search!");
            } else {

                DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
                int RowCount = TM.getRowCount();
                for (int i = RowCount - 1; i >= 0; i--) {
                    TM.removeRow(i);
                }
                Search(text);
            }
        }
    }//GEN-LAST:event_SearchBarKeyPressed

    private void CloseLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseLabelMouseClicked
        // TODO add your handling code here:
        SearchBar.setVisible(false);
        CloseLabel.setVisible(false);
        SearchBar.setText(null);
        DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
        int RowCount = TM.getRowCount();
        for (int i = RowCount - 1; i >= 0; i--) {
            TM.removeRow(i);
        }
        printList();
        p = 0;
    }//GEN-LAST:event_CloseLabelMouseClicked

    Node<Student> SortedMergeForName(Node<Student> a, Node<Student> b) {
        Collator Col = Collator.getInstance();
        Node<Student> result = null;

        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }

        if (Col.compare(a.getData().getName(), b.getData().getName()) < 0) {
            result = a;
            result.setNext(SortedMergeForName(a.getNext(), b));
        } else {
            result = b;
            result.setNext(SortedMergeForName(a, b.getNext()));
        }
        return result;
    }

    Node<Student> MergeSortForName(Node<Student> h) {

        if (h == null || h.getNext() == null) {
            return h;
        }

        Node<Student> middle = StudentsList.getMiddle(h);
        Node<Student> nextofmiddle = middle.getNext();

        middle.setNext(null);

        Node<Student> left = MergeSortForName(h);

        Node<Student> right = MergeSortForName(nextofmiddle);

        Node<Student> sortedlist = SortedMergeForName(left, right);
        return sortedlist;
    }

    Node<Student> SortedMergeForFamilyName(Node<Student> a, Node<Student> b) {
        Collator Col = Collator.getInstance();
        Node<Student> result = null;

        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }

        if (Col.compare(a.getData().getFamilyName(), b.getData().getFamilyName()) < 0) {
            result = a;
            result.setNext(SortedMergeForFamilyName(a.getNext(), b));
        } else {
            result = b;
            result.setNext(SortedMergeForFamilyName(a, b.getNext()));
        }
        return result;
    }

    Node<Student> MergeSortForFamilyName(Node<Student> h) {

        if (h == null || h.getNext() == null) {
            return h;
        }

        Node<Student> middle = StudentsList.getMiddle(h);
        Node<Student> nextofmiddle = middle.getNext();

        middle.setNext(null);

        Node<Student> left = MergeSortForFamilyName(h);

        Node<Student> right = MergeSortForFamilyName(nextofmiddle);

        Node<Student> sortedlist = SortedMergeForFamilyName(left, right);
        return sortedlist;
    }

    Node<Student> SortedMergeForIDNum(Node<Student> a, Node<Student> b) {
        Collator Col = Collator.getInstance();
        Node<Student> result = null;

        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }

        if (Col.compare(a.getData().getStudentID_Num(), b.getData().getStudentID_Num()) < 0) {
            result = a;
            result.setNext(SortedMergeForIDNum(a.getNext(), b));
        } else {
            result = b;
            result.setNext(SortedMergeForIDNum(a, b.getNext()));
        }
        return result;
    }

    Node<Student> MergeSortForIDNum(Node<Student> h) {

        if (h == null || h.getNext() == null) {
            return h;
        }

        Node<Student> middle = StudentsList.getMiddle(h);
        Node<Student> nextofmiddle = middle.getNext();

        middle.setNext(null);

        Node<Student> left = MergeSortForIDNum(h);

        Node<Student> right = MergeSortForIDNum(nextofmiddle);

        Node<Student> sortedlist = SortedMergeForIDNum(left, right);
        return sortedlist;
    }

    Node<Student> SortedMergeForGPA(Node<Student> a, Node<Student> b) {
        Node<Student> result = null;

        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }

        if (Integer.parseInt(a.getData().getGPA()) > Integer.parseInt(b.getData().getGPA())) {
            result = a;
            result.setNext(SortedMergeForGPA(a.getNext(), b));
        } else {
            result = b;
            result.setNext(SortedMergeForGPA(a, b.getNext()));
        }
        return result;
    }

    Node<Student> MergeSortForGPA(Node<Student> h) {

        if (h == null || h.getNext() == null) {
            return h;
        }

        Node<Student> middle = StudentsList.getMiddle(h);
        Node<Student> nextofmiddle = middle.getNext();

        middle.setNext(null);

        Node<Student> left = MergeSortForGPA(h);

        Node<Student> right = MergeSortForGPA(nextofmiddle);

        Node<Student> sortedlist = SortedMergeForGPA(left, right);
        return sortedlist;
    }

    int N = 1;
    int F = 1;
    int ID = 1;
    int GPA = 1;

    public void TableSorting() {
        jTable1.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
                int col = jTable1.columnAtPoint(e.getPoint());
                int rowcount = TM.getRowCount();
                switch (col) {
                    case 0:
                        StudentsList.setHead(MergeSortForName(StudentsList.getHead()));
                        if (N % 2 == 0) {
                            StudentsList.reverseList();
                        }
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        printList();
                        N++;
                        break;
                    case 1:
                        StudentsList.setHead(MergeSortForFamilyName(StudentsList.getHead()));
                        if (F % 2 == 0) {
                            StudentsList.reverseList();
                        }
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        printList();
                        F++;
                        break;
                    case 2:
                        StudentsList.setHead(MergeSortForIDNum(StudentsList.getHead()));
                        if (ID % 2 == 0) {
                            StudentsList.reverseList();
                        }
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        printList();
                        ID++;
                        break;
                    case 3:
                        StudentsList.setHead(MergeSortForGPA(StudentsList.getHead()));
                        if (GPA % 2 == 0) {
                            StudentsList.reverseList();
                        }
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        printList();
                        GPA++;
                        break;
                }
            }
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Add;
    private javax.swing.JLabel CloseLabel;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton ImportButton;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JLabel SearchLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
